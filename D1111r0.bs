<pre class='metadata'>
Title: Resolution to NB Comments on the Parallelism TS v2
Shortname: P1111
Revision: 0
Status: P
Group: WG21
Audience: SG1, LEWG, LWG
Issue Tracking: GitHub https://github.com/brycelelbach/wg21_p1111_proposed_resolution_to_nb_comments_on_the_parallelism_ts_v2/issues
URL: http://wg21.link/D1111R0
Editor: Bryce Adelstein Lelbach, NVIDIA, brycelelbach@gmail.com
Editor: Matthias Kretz, m.kretz@gsi.de
Date: 2018-06-04
Markup Shorthands: markdown yes
Toggle Diffs: yes
No Abstract: yes
Boilerplate: style-syntax-highlighting off
</pre>

<pre class='biblio'>
{
  "N4744": {
    "authors": [ "ISO/IEC JTC1/SC22/WG21" ],
    "href": "https://wg21.link/N4744",
    "title": "Programming Languages — Technical Specification for C++ Extensions for Parallelism Version 2",
    "status": "Proposed Draft Technical Specification",
    "publisher": "ISO/IEC",
    "deliveredBy": [ "https://wg21.link/N4744" ]
  }
}
</pre>

<style>
ins, ins *, span.ins, span.ins * { background-color: rgb(200, 250, 200); color: rgb(0, 136, 0); text-decoration: none; }
del, del *, span.del, span.del * { background-color: rgb(250, 200, 200); color: rgb(255, 0, 0); text-decoration: line-through; text-decoration-color: rgb(255, 0, 0); }
math, span.math { font-family: serif; font-style: italic; }
<!-- https://stackoverflow.com/questions/3200249/html-list-style-type-dash -->
ul { margin: 0; list-style-type: none; }
ul > li { text-indent: -5px; }
ul > li p { display: inline; }
ul > li:before { content: "—"; text-indent: -5px; }
</style>

NOTE: All wording is relative to [[N4744]], the Proposed Draft Technical
Specification for version 2 of the C++ Parallelism Technical Specification
(ISO/IEC PTDS 19750).

NOTE: Paragraph references are relative to [[N4744]] and do not take paragraph
renumbering into account. In the places where this would be ambiguous,
descriptions of the location are provided instead of paragraph numbers. 

NOTE: The changes should be applied in order.

CA 15, CA 16, CA 17, US 11, US 12, CH 35 {#ca15-17us11-12ch35}
==============================================================

- Replace all occurrences of <span class="del">&#8714;</span> preceding a half-open range with <span class="ins">in the range of</span>.
- Replace all remaining occurrences of <span class="del">&#8714;</span> with <span class="ins">&#x2208;</span>.
- Replace all occurrences of <span class="del">&#8469;<sub>0</sub></span> with <span class="ins">&#8469;</span>.
- Replace all occurrences of <span class="del">-th</span> to <span class="ins"><sup>th</sup></span>.
- Replace all occurrences of <code>i</code> and <code>j</code> (code font) with <span class="math">i</span> and <span class="math">j</span> (math font) respectively.

Modify [**parallel.simd.whereexpr**] paragraph 12 as follows:
<blockquote>
If the template parameter <code>Flags</code> is <code>vector_aligned_tag</code>, <code>mem</code> shall point to storage aligned by <code>memory_alignment_v&lt;T, U&gt;</code>.
If the template parameter <code>Flags</code> is <code>overaligned_tag&lt;N&gt;</code>, <code>mem</code> shall point to storage aligned by <code>N</code>.
If the template parameter <code>Flags</code> is <code>element_aligned_tag</code>, <code>mem</code> shall point to storage aligned by <code>alignof(U)</code>.
If <code>M</code> is not <code>bool</code>, the largest <span class="del"><span class="math">i</span> &#8714; <code>[0, M::size())</code> where <code>mask[<span class="math">i</span>]</code> is <code>true</code></span><span class="ins">selected index</span> is less than the number of values pointed to by <code>mem</code>.
</blockquote>

In [**parallel.simd.reductions**] replace all occurrences of:

<blockquote>
for all <span class="del"><span class="math">i</span> &#8714; {<span class="math">j</span> &#8714; &#8469;<sub>0</sub> &#8739; <span class="math">j</span> &lt; <code>M::size()</code> &#8896; <code>mask[<span class="math">j</span>]</code>}</span>
</blockquote>

with:

<blockquote>
for all <span class="ins">selected indices <span class="math">i</span></span>
</blockquote>

US 37 {#us37}
=============

Move paragraphs 4 and 5 of [**parallel.simd.overview**] into a new subsection after [**parallel.simd.overview**]:

<ins>
<blockquote>
**9.3.2 simd width [parallel.simd.width]**

`static constexpr size_t size() noexcept;`

*Returns:* The width of `simd<T, Abi>`.
</blockquote>
</ins>

Move paragraphs 4 and 5 of [**parallel.simd.mask.overview**] into a new subsection after [**parallel.simd.mask.overview**]:

<ins>
<blockquote>
**9.5.2 simd_mask width [parallel.simd.mask.width]**

`static constexpr size_t size() noexcept;`

*Returns:* The width of `simd<T, Abi>`.
</blockquote>
</ins>

US 44 {#us44}
=============

Modify [**parallel.references**] paragraph 2 as follows:

<blockquote>
ISO/IEC 14882:2017 is herein called the <i><b>C++ Standard</b></i>.
<span class="ins">&nbsp;References to clauses within the C++ Standard are written as "C++17 §3.2".</span>
The library described in ISO/IEC 14882:2017 clauses 20-33 is herein called the <i><b>C++ Standard Library</b></i>.
The C++ Standard Library components described in ISO/IEC 14882:2017 clauses 28, 29.8 and 23.10.10 are herein called the <i><b>C++ Standard Algorithms Library</b></i>.
</blockquote>

Replace all references to the C++ Standard with references in the style "C++17 §3.2":

Modify [**parallel.simd.ctor**] paragraph 7 as follows:

<blockquote>
if both U and value_type are integral, the integer conversion rank <span class="del">[conv.rank]</span><span class="ins">(C++17 §7.15)</span> of value_type is greater than the integer conversion rank of U.
</blockquote>

Modify [**parallel.simd.ctor**] paragraph 11 as follows:

<blockquote>
Vectorization-unsafe standard library functions may not be invoked by <code>gen</code> (<span class="del">[algorithms.parallel.exec]</span><span class="ins">C++17 §28.4.3</span>).
</blockquote>

Modify [**parallel.simd.reductions**] paragraph 4 as follows:

<blockquote>
```
template<class T, class Abi, class BinaryOperation = plus<>>
T reduce(const simd<T, Abi>& x, BinaryOperation binary_op = {});
```

*Requires:* `binary_op` shall be callable with two arguments of type `T` returning `T`, or callable
with two arguments of type `simd<T, A1>` returning `simd<T, A1>` for every `A1` that is an ABI tag type.

*Returns:* <code><em>GENERALIZED_SUM</em>(binary_op, x.data[<em>i</em>], ...)</code> for all <span class="math">i</span> &#x2208; `[0, size())`<span class="ins"> (C++17 §29.2)</span>.
</blockquote>

US 53 {#us53}
=============

Modify [**parallel.scope**] paragraph 3 as follows:

<blockquote>
The goal of this Technical Specification is to build widespread existing practice for parallelism in the C++ <span class="ins">programming language</span><span class="del">standard algorithms library</span>. It gives advice on extensions to those vendors who wish to provide them.
</blockquote>

US 3 {#us3}
===========

Insert a new paragraph after [**parallel.general.namespaces**] p1:

<ins><blockquote>
Each header described in this technical specification shall import the contents of `std::experimental::parallelism_v2` into `std::experimental` as if by

```
    namespace std::experimental {
      inline namespace parallelism_v2 {}
    }
```
</blockquote></ins>

US 7 {#us7}
===========

Modify [**parallel.alg.ops.synopsis**] as follows:

<blockquote>
<code>// Exposition only: Suppress template argument deduction.</code><br/>
<code>template&lt;class T&gt; struct <span class="del">no_deduce</span><span class="ins">type_identity</span> { using type = T; };</code><br/>
<code>template&lt;class T&gt; using <span class="del">no_deduce_t</span><span class="ins">type_identity_t</span> = typename <span class="del">no_deduce</span><span class="ins">type_identity</span>&lt;T&gt;::type;</code>
</blockquote>

In [**parallel.alg**], replace all occurrences of:

<blockquote>
<span class="del">`no_deduce_t`</span>
</blockquote>

with:

<blockquote>
<span class="ins">`type_identity_t`</span>
</blockquote>

In [**parallel.simd**], replace all occurrences of:

<blockquote>
<span class="del">`nodeduce_t`</span>
</blockquote>

with:

<blockquote>
<span class="ins">`type_identity_t`</span>
</blockquote>

CA 4 {#ca4}
===========

Remove the column titled "Doc. No." from [**parallel.general.features**] Table 1.

CA 8 {#ca8}
===========

Modify [**parallel.alg.reductions**] paragraph 3 as follows:

<blockquote>
Modifications to the accumulator by the application of element access functions accrue as
partial results.
At some point before the algorithm returns, the partial results are combined, two at a time, using the reduction object's combiner operation until a single value remains, which is then assigned back to the live-out object.
[ *Note:*
<span class="del">in</span><span class="ins">In</span> order to produce useful results, modifications to the accumulator should be limited to commutative operations closely related to the combiner operation.
For example if the combiner is `plus<T>`, incrementing the accumulator would be consistent with the combiner but doubling it or assigning to it would not.
— *end note* ]
</blockquote>

CA 5 {#ca5}
===========

Modify [**parallel.exceptions.synopsis**] p2 as follows:

<blockquote>
<del>The type <code>exception_list::iterator</code> fulfills the requirements of <code>ForwardIterator</code>.</del>
<ins>`exception_list::iterator` is an iterator which meets the forward iterator requirements and has a value type of `exception_ptr`.</ins>
</blockquote>
<!-- This is a copy of the tzdb wording -->

DE 19, DE 48 {#de19de48}
========================

Modify the `array`-returning declarations of `split` in [**parallel.simd.synopsis**]:

<blockquote>
<pre><code>
template&lt;size_t... Sizes, class T, class Abi&gt;
  tuple&lt;simd&lt;T, simd_abi::deduce_t&lt;T, Sizes&gt;&gt;...&gt;
    split(const simd&lt;T, Abi&gt;&amp;);
template&lt;size_t... Sizes, class T, class Abi&gt;
  tuple&lt;simd_mask&lt;T, simd_mask_abi::deduce_t&lt;T, Sizes&gt;&gt;...&gt;
    split(const simd_mask&lt;T, Abi&gt;&amp;);
template&lt;class V, class Abi&gt;
  array&lt;V, simd_size_v&lt;typename V::value_type, Abi&gt; / V::size()&gt;
    split(const simd&lt;typename V::value_type, Abi&gt;&amp;);
template&lt;class V, class Abi&gt;
  array&lt;V, simd_size_v&lt;typename V::<span class="ins">simd_type::</span>value_type, Abi&gt; / V::size()&gt;
    split(const simd_mask&lt;typename V::<span class="ins">simd_type::</span>value_type, Abi&gt;&amp;);
</code></pre>
</blockquote>

Modify the `array`-returning definitions of `split` in [**parallel.simd.casts**]:

<blockquote>
<pre><code>
template&lt;class V, class Abi&gt;
  array&lt;V, simd_size_v&lt;typename V::value_type, Abi&gt; / V::size()&gt;
    split(const simd&lt;typename V::value_type, Abi&gt;&amp; x);
template&lt;class V, class Abi&gt;
  array&lt;V, simd_size_v&lt;typename V::<span class="ins">simd_type::</span>value_type, Abi&gt; / V::size()&gt;
    split(const simd_mask&lt;typename V::<span class="ins">simd_type::</span>value_type, Abi&gt;&amp; x);
</code></pre>

*Returns:* An array of data-parallel objects with the `i`-th `simd`/`simd_mask` element of the `j`-th
element initialized to the value of the element in `x` with index `i + j * V::size()`.

*Remarks:* These functions shall not participate in overload resolution unless <span class="ins">either:</span>
- <span class="del">`simd_size_v<typename V::value_type, Abi>` is an integral multiple of `V::size()`, and</span>
- <span class="del">for the overload with a `simd` parameter `is_simd_v<V>` is `true`, for the overload with a `simd_mask` parameter `is_simd_mask_v<V>` is `true`.</span>
- <span class="ins">`is_simd_v<V>` is `true` and `simd_size_v<typename V::value_type, Abi>` is an integral multiple of `V::size()`, or</span>
- <span class="ins">`is_simd_mask_v<V>` is `true` and `simd_size_v<typename V::simd_type::value_type, Abi>` is an integral multiple of `V::size()`.</span>

</blockquote>

CH 21 {#ch21}
=============

Modify the synopsis for namespace `simd_abi` in [**parallel.simd.abi**] as follows:

<blockquote>
<pre><code>
namespace simd_abi {
  struct scalar {};
  template&lt;int N&gt; struct fixed_size {};
  template&lt;class T&gt; inline constexpr in<span class="ins">t</span> max_fixed_size = <i>implementation-defined</i>;
  template&lt;class T&gt; using compatible = <i>implementation-defined</i>;
  template&lt;class T&gt; using native = <i>implementation-defined</i>;
}
</code></pre>
</blockquote>

CH 22, CH 23 {#ch22-23}
=======================

Modify [**parallel.simd.abi**] paragraph 9 as follows:

<blockquote>
`compatible<T>` is an implementation-defined alias for an ABI tag.
[ *Note:*
The intent is to use the ABI tag producing the most efficient data-parallel execution for the element type `T` that ensures ABI compatibility between translation units on the target architecture.
— *end note* ]

[ *Example:*
Consider a target architecture supporting the extended ABI tags `__simd128` and `__simd256`, where the `__simd256` type requires an optional ISA extension on said architecture. Also,
the target architecture does not support long double with either ABI tag. The implementation therefore defines <span class="ins">`compatible<T>` as an alias for:</span>
- <span class="del">`compatible<T>` is an alias for __simd128 for all vectorizable T, except `long double`, and</span>
- <span class="del">`compatible<long double>` as an alias for scalar.</span>
- <span class="ins">`scalar` if `T` is the same type as `long double`, and</span>
- <span class="ins">`__simd128` otherwise.</span> — *end example* ]

</blockquote>

US 42, US 43 {#us42-43}
=======================

Modify [**parallel.simd.binary**] as follows:

<blockquote>
<xmp>
friend simd operator+(const simd& lhs, const simd& rhs);
friend simd operator-(const simd& lhs, const simd& rhs);
friend simd operator*(const simd& lhs, const simd& rhs);
friend simd operator/(const simd& lhs, const simd& rhs);
friend simd operator%(const simd& lhs, const simd& rhs);
friend simd operator&(const simd& lhs, const simd& rhs);
friend simd operator|(const simd& lhs, const simd& rhs);
friend simd operator^(const simd& lhs, const simd& rhs);
friend simd operator<<(const simd& lhs, const simd& rhs);
friend simd operator>>(const simd& lhs, const simd& rhs);
</xmp>

*Returns:* A `simd` object initialized with the results of <span class="del">the element-wise application of the indicated operator.</span><span class="ins">applying the indicated operator to `lhs` and `rhs` as a binary element-wise operation.</span>

*Throws:* Nothing.

*Remarks:* Each of these operators shall not participate in overload resolution unless the
indicated operator can be applied to objects of type `value_type`.
</blockquote>

Modify [**parallel.simd.cassign**] as follows:

<blockquote>
<pre><code>
friend simd&amp; operator+=(simd&amp; lhs, const simd&amp; rhs);
friend simd&amp; operator-=(simd&amp; lhs, const simd&amp; rhs);
friend simd&amp; operator*=(simd&amp; lhs, const simd&amp; rhs);
friend simd&amp; operator/=(simd&amp; lhs, const simd&amp; rhs);
friend simd&amp; operator%=(simd&amp; lhs, const simd&amp; rhs);
friend simd&amp; operator&amp;=(simd&amp; lhs, const simd&amp; rhs);
friend simd&amp; operator|=(simd&amp; lhs, const simd&amp; rhs);
friend simd&amp; operator^=(simd&amp; lhs, const simd&amp; rhs);
friend simd&amp; operator&lt;&lt;=(simd&amp; lhs, const simd&amp; rhs);
friend simd&amp; operator&gt;&gt;=(simd&amp; lhs, const simd&amp; rhs);
<span class="del">friend simd&amp; operator&lt;&lt;=(simd&amp; lhs, int n);
friend simd&amp; operator&gt;&gt;=(simd&amp; lhs, int n);</span>
</code></pre>

*Effects:* These operators <span class="del">perform the indicated binary element-wise operation.</span><span class="ins">apply the indicated operator to `lhs` and `rhs` as an element-wise operation.</span>

*Returns:* `lhs`.

*Throws:* Nothing.

*Remarks:* These operators shall not participate in overload resolution unless the indicated operator can be applied to objects of type `value_type`.

<ins><div>
```
friend simd& operator<<=(simd& lhs, int n);
friend simd& operator>>=(simd& lhs, int n);
```

*Effects:* Equivalent to: `return operator@=(lhs, simd(n));`

*Remarks:* These operators shall not participate in overload resolution unless the indicated operator can be applied to objects of type `value_type`.
</div></ins>
</blockquote>

Modify [**parallel.simd.comparison**] as follows:

<blockquote>
<code><pre>
friend mask_type operator==(const simd&amp; <span class="ins">lhs</span>, const simd&amp; <span class="ins">rhs</span>);
friend mask_type operator!=(const simd&amp; <span class="ins">lhs</span>, const simd&amp; <span class="ins">rhs</span>);
friend mask_type operator&gt;=(const simd&amp; <span class="ins">lhs</span>, const simd&amp; <span class="ins">rhs</span>);
friend mask_type operator&lt;=(const simd&amp; <span class="ins">lhs</span>, const simd&amp; <span class="ins">rhs</span>);
friend mask_type operator&gt;(const simd&amp; <span class="ins">lhs</span>, const simd&amp; <span class="ins">rhs</span>);
friend mask_type operator&lt;(const simd&amp; <span class="ins">lhs</span>, const simd&amp; <span class="ins">rhs</span>);
</pre></code>

*Returns:* A `simd_mask` object initialized with the results of <span class="del">the element-wise application of the indicated operator.</span><span class="ins">applying the indicated operator to `lhs` and `rhs` as a binary element-wise operation.</span>

*Throws:* Nothing.
</blockquote>

Modify [**parallel.simd.mask.binary**] as follows:

<blockquote>
<code><pre>
friend simd_mask operator&amp;&amp;(const simd_mask&amp; <span class="ins">lhs</span>, const simd_mask&amp; <span class="ins">rhs</span>) noexcept;
friend simd_mask operator||(const simd_mask&amp; <span class="ins">lhs</span>, const simd_mask&amp; <span class="ins">rhs</span>) noexcept;
friend simd_mask operator&amp; (const simd_mask&amp; <span class="ins">lhs</span>, const simd_mask&amp; <span class="ins">rhs</span>) noexcept;
friend simd_mask operator| (const simd_mask&amp; <span class="ins">lhs</span>, const simd_mask&amp; <span class="ins">rhs</span>) noexcept;
friend simd_mask operator^ (const simd_mask&amp; <span class="ins">lhs</span>, const simd_mask&amp; <span class="ins">rhs</span>) noexcept;
</pre></code>

*Returns:* A `simd_mask` object initialized with the results of <span class="del">the element-wise appliation of the indicated operator.</span><span class="ins">applying the indicated operator to `lhs` and `rhs` as a binary element-wise operation.</span>
</blockquote>

Modify [**parallel.simd.mask.cassign**] as follows:

<blockquote>
<xmp>
friend simd_mask& operator&=(simd_mask& lhs, const simd_mask& rhs) noexcept;
friend simd_mask& operator|=(simd_mask& lhs, const simd_mask& rhs) noexcept;
friend simd_mask& operator^=(simd_mask& lhs, const simd_mask& rhs) noexcept;
</xmp>

*Effects:* These operators <span class="del">perform the indicated binary element-wise operation.</span><span class="ins">apply the indicated operator to `lhs` and `rhs` as a binary element-wise operation.</span>

*Returns:* `lhs`.
</blockquote>

Modify [**parallel.simd.mask.comparison**] as follows:

<blockquote>
<code><pre>
friend simd_mask operator==(const simd_mask&amp; <span class="ins">lhs</span>, const simd_mask&amp; <span class="ins">rhs</span>) noexcept;
friend simd_mask operator!=(const simd_mask&amp; <span class="ins">lhs</span>, const simd_mask&amp; <span class="ins">rhs</span>) noexcept;
</pre></code>

*Returns:* An object initialized with the results of <span class="del">the element-wise application of the indicated operator.</span><span class="ins">applying the indicated operator to `lhs` and `rhs` as a binary element-wise operation.</span>
</blockquote>

CH 30, CH 33 {#ch30ch33}
========================

Add `noexcept` to the following functions in [**parallel.simd**]:

- `simd_cast`
- `static_simd_cast`
- `split`
- `concat`
- `reduce(const const_where_expression<M, V>& x, plus<> binary_op)`
- `reduce(const const_where_expression<M, V>& x, multiplies<> binary_op)`
- `reduce(const const_where_expression<M, V>& x, bit_and<> binary_op)`
- `reduce(const const_where_expression<M, V>& x, bit_or<> binary_op)`
- `reduce(const const_where_expression<M, V>& x, bit_xor<> binary_op)`
- `hmin`
- `hmax`
- All members of `const_where_expression` and `where_expression`
- All `simd` constructors, except `simd(const U* mem, Flags f)`
- All `simd` member and non-member operators, except `operator[]`
- All `reference` member functions
- `simd_mask()`
<!-- simd_mask has noexcept correct already -->

Remove `noexcept` from  the following functions in [**parallel.simd**]:

- `find_first_set` (only the non-simd overload)</li>
- `find_last_set` (only the non-simd overload)</li>
- `clamp` (only in the synopsis)</li>

Remove the following *Throws:* paragraphs:

- [**parallel.simd.whereexpr**] paragraph 10
- [**parallel.simd.ctor**] paragraph 3
- [**parallel.simd.unary**] paragraph 5, paragraph 9, paragraph 13, paragraph 17, paragraph 20, paragraph 23, paragraph 27, and paragraph 30 
- [**parallel.simd.binary**] paragraph 3 and paragraph 7
- [**parallel.simd.cassign**] paragraph 4
- [**parallel.simd.comparison**] paragraph 3
- [**parallel.simd.reductions**] paragraph 12, paragraph 15, paragraph 19, paragraph 23, paragraph 26, paragraph 29,  paragraph 32,  paragraph 35
- [**parallel.simd.casts**] paragraph 4 and paragraph 10

Modify [**parallel.simd.overview**] paragraph 2 as follows:

<blockquote>
Every specialization of <code>simd</code> shall be a complete type. The specialization <code>simd&lt;T, Abi&gt;</code> is supported if <code>T</code> is a vectorizable type and
- <code>Abi</code> is <code>simd_abi::scalar</code>, or
- <code>Abi</code> is <code>simd_abi::fixed_size&lt;N&gt;</code>, with <code>N</code> <span class="del">is</span> constrained as defined in 9.2.1.

If <code>Abi</code> is an extended ABI tag, it is implementation-defined whether <code>simd&lt;T, Abi&gt;</code> is supported.
[ *Note:* The intent is for implementations to decide on the basis of the currently targeted system. — *end note* ]

If <code>simd&lt;T, Abi&gt;</code> is not supported, the specialization shall have a deleted default constructor, deleted destructor, deleted copy constructor, and deleted copy assignment. <span class="ins">Otherwise, the following are `true`:</span>
- <span class="ins">`is_nothrow_move_constructible_v<simd<T, Abi>>`, and</span>
- <span class="ins">`is_nothrow_move_assignable_v<simd<T, Abi>>`, and</span>
- <span class="ins">`is_nothrow_default_constructible_v<simd<T, Abi>>`.</span>

</blockquote>

Modify [**parallel.simd.mask.overview**] paragraph 2 as follows:

<blockquote>
Every specialization of <code>simd_mask</code> shall be a complete type. The specialization <code>simd_mask&lt;T, Abi&gt;</code> is supported if <code>T</code> is a vectorizable type and
<ul>
<li>
<code>Abi</code> is <code>simd_abi::scalar</code>, or
</li>
<li>
<code>Abi</code> is <code>simd_abi::fixed_size&lt;N&gt;</code>, with <code>N</code> constrained as defined in (9.2.1).
</li>
</ul>

If <code>Abi</code> is an extended ABI tag, it is implementation-defined whether <code>simd_mask&lt;T, Abi&gt;</code> is supported.
[ *Note:* The intent is for implementations to decide on the basis of the currently targeted system. — *end note* ]

If <code>simd_mask&lt;T, Abi&gt;</code> is not supported, the specialization shall have a deleted default constructor, deleted destructor, deleted copy constructor, and deleted copy assignment. <span class="ins">Otherwise, the following are `true`:
- <span class="ins">`is_nothrow_move_constructible_v<simd_mask<T, Abi>>`, and</span>
- <span class="ins">`is_nothrow_move_assignable_v<simd_mask<T, Abi>>`, and</span>
- <span class="ins">`is_nothrow_default_constructible_v<simd_mask<T, Abi>>`.</span>

</blockquote>

After [**parallel.simd.mask.ctor**] paragraph 8 add a new paragraph:

<ins>
<blockquote>
*Throws:* Nothing.
</blockquote>
</ins>

After [**parallel.simd.mask.copy**] paragraph 3 and paragraph 7 add a new paragraph:

<ins>
<blockquote>
*Throws:* Nothing.
</blockquote>
</ins>

After [**parallel.simd.mask.reductions**] paragraph 13, paragraph 16, and paragraph 22 add a new paragraph:

<ins>
<blockquote>
*Throws:* Nothing.
</blockquote>
</ins>

CH 38 {#ch38}
=============

Modify [**parallel.simd.overview**] as follows:

<blockquote>
<pre><code>
template&lt;class T, class Abi&gt; class simd {
public:
  using value_type = T;
  using reference = <i>see below</i>;
  using mask_type = simd_mask&lt;T, Abi&gt;<span class="ins">;</span>
  using abi_type = Abi;

</code></pre>
</blockquote>

US 41, US 45, CH 46, CH 47 {#us41us45ch46-47}
=============================================

Modify the definition of `simd`'s `U&&` constructor in [**parallel.simd.ctor**] as follows:

<blockquote>
<xmp>
template<class U> simd(U&&);
</xmp>

*Effects:* Constructs an object with each element initialized to the value of the argument
after conversion to `value_type`.

*Throws:* Any exception thrown while converting the argument to `value_type`.

*Remarks:* Let `From` <span class="ins">denote</span><span class="del">identify</span> the type `remove_cv_t<remove_reference_t<U>>`. This constructor shall not participate in overload resolution unless:
- `From` is a vectorizable type and every possibly value of `From` can be represented with `value_type`, or
- `From` is not an arithmetic type and is implicitly convertible to `value_type`, or
- `From` is int, or
- From is `unsigned int` and `value_type` is an unsigned integral type.

</blockquote>

Modify the definition of `simd_cast` in [**parallel.simd.casts**] as follows:

<blockquote>
<pre><code>
template&lt;class T, class U, class Abi&gt; <i>see below</i> simd_cast(const simd&lt;U, Abi&gt;&amp; x);
</code></pre>

Let `To` <span class="ins">denote</span><span class="del">identify</span> `T::value_type` if `is_simd_v<T>` is `true`, or `T` otherwise.

*Returns:* A `simd` object with the <span class="math">i</span><sup>th</sup> element initialized to <code>static_cast&lt;To&gt;(x[<span class="math">i</span>])</code> for all <span class="math">i</span> &#x2208; `[0, size())`.

*Throws:* Nothing.

*Remarks:* The function shall not participate in overload resolution unless
- every possible value of type `U` can be represented with type `To`, and
- either
    - `is_simd_v<T>` is `false`, or
    - `T::size() == simd<U, Abi>::size()` is `true`.

The return type is
- `T` if `is_simd_v<T>` is `true`<span class="del">, otherwise</span><span class="ins">;</span>
- <span class="ins">otherwise,&nbsp;</span>`simd<T, Abi>` <span class="del">is</span><span class="ins">if</span> `U` is <span class="ins">the same type as</span> `T`<span class="del">, otherwise</span><span class="ins">;</span>
- <span class="ins">otherwise,&nbsp;</span>`simd<T, simd_abi::fixed_size<simd<U, Abi>::size()>>`

</blockquote>

Modify the definition of `static_simd_cast` in [**parallel.simd.casts**] as follows:

<blockquote>
<pre><code>
template&lt;class T, class U, class Abi&gt; <i>see below</i> static_simd_cast(const simd&lt;U, Abi&gt;&amp; x);
</code></pre>

Let `To` <span class="ins">denote</span><span class="del">identify</span> `T::value_type` if `is_simd_v<T>` is true or `T` otherwise.

*Returns:* A `simd` object with the <span class="math">i</span><sup>th</sup> element initialized to <code>static_cast&lt;To&gt;(x[<span class="math">i</span>])</code> for all <span class="math">i</span> &#x2208; `[0, size())`.

*Throws:* Nothing.

*Remarks:* The function shall not participate in overload resolution unless either<span class="ins">:</span>
- `is_simd_v<T>` is `false`, or
- `T::size() == simd<U, Abi>::size()` is `true`.

The return type is<span class="ins">:</span>
- `T` if `is_simd_v<T>` is `true`<span class="del">, otherwise</span><span class="ins">;</span>
- <span class="ins">otherwise,&nbsp;</span>`simd<T, Abi>` if either `U` is<span class="ins"> the same type as</span> `T` or <span class="del">`U` and `T` are integral types that only differ in signedness, otherwise</span><span class="ins">`make_signed_t<U>` is the same type as `make_signed_t<T>`;</span>
- <span class="ins">otherwise,&nbsp;</span>`simd<T, simd_abi::fixed_size<simd<U, Abi>::size()>>`.

</blockquote>

US 50 {#us50}
=============

Modify [**parallel.simd.math**] paragraph 2 as follows:

<blockquote>
Each function overload produced by the above rules applies the indicated `<cmath>` function element-wise.
<span class="del">The results per element are not required to be bitwise</span><span class="ins">For the mathematical functions, the results per element only need to be approximately</span> equal to the application of the function which is overloaded for the element type.
</blockquote>

US 51 {#us51}
=============

Modify [**parallel.simd.synopsis**] as follows:

<blockquote>
<code>bool all_of       (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>bool any_of       (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>bool none_of      (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>bool some_of      (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>int popcount      (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>int find_first_set(<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>int find_last_set (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
</blockquote>

Modify [**parallel.simd.mask.reductions**] as follows:

<blockquote>
<code>bool all_of       (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>bool any_of       (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>bool none_of      (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>bool some_of      (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>int popcount      (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>

*Returns:* <code>all_of</code> and <code>any_of</code> return their arguments; <code>none_of</code> returns the negation of its argument; <code>some_of</code> returns <code>false</code>; <code>popcount</code> returns the integral representation of its argument.

*Remarks:* <span class="del">The functions shall not participate in overload resolution unless the argument is of type <code>bool</code>.</span><span class="ins">The parameter type <code><em>T</em></code> is an unspecified type that is only constructible via implicit conversion from `bool`.</span>

<code>int find_first_set(<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>
<code>int find_last_set (<em><span class="del">see below</span><span class="ins">T</span></em>) noexcept;</code><br/>

*Requires:* The value of the argument is <code>true</code>.

*Returns:* <code>0</code>.

*Remarks:* <span class="del">The functions shall not participate in overload resolution unless the argument is of type <code>bool</code>.</span><span class="ins">The parameter type <code><em>T</em></code> is an unspecified type that is only constructible via implicit conversion from `bool`.</span>
</blockquote>

